/** @license React vundefined
 * react-noop-renderer-flight-server.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var flightModules = require('react-noop-renderer/flight-modules');
var ReactFlightServer = require('react-server/flight');

/**
 * This is a renderer of React that doesn't have a render target output.
 * It is useful to demonstrate the internals of the reconciler in isolation
 * and for testing semantics of reconciliation separate from the host
 * environment.
 */
const ReactNoopFlightServer = ReactFlightServer({
  scheduleWork(callback) {
    callback();
  },

  beginWriting(destination) {},

  writeChunk(destination, buffer) {
    destination.push(Buffer.from(buffer).toString('utf8'));
  },

  completeWriting(destination) {},

  close(destination) {},

  flushBuffered(destination) {},

  convertStringToBuffer(content) {
    return Buffer.from(content, 'utf8');
  },

  formatChunkAsString(type, props) {
    return JSON.stringify({
      type,
      props
    });
  },

  formatChunk(type, props) {
    return Buffer.from(JSON.stringify({
      type,
      props
    }), 'utf8');
  },

  isModuleReference(reference) {
    return reference.$$typeof === Symbol.for('react.module.reference');
  },

  getModuleKey(reference) {
    return reference;
  },

  resolveModuleMetaData(config, reference) {
    return flightModules.saveModule(reference.value);
  }

});

function render(model) {
  const destination = [];
  const bundlerConfig = undefined;
  const request = ReactNoopFlightServer.createRequest(model, destination, bundlerConfig);
  ReactNoopFlightServer.startWork(request);
  return destination;
}

exports.render = render;
